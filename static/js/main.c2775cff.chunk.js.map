{"version":3,"sources":["Form.js","App.js","index.js"],"names":["Form","useState","Email","Password","color","setColor","error","setError","image","setImage","input","setInputs","inputChange","event","target","value","name","prevValue","className","onChange","style","background","borderColor","type","placeholder","onClick","Object","entries","forEach","entry","includes","values","preventDefault","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c2775cff.chunk.js","sourcesContent":["import React,{useState} from 'react';\n\n\nconst Form = () => {\n      const[color,setColor] = useState({\n        'First Name':'',\n        'Last Name':'',\n        Email:'',\n        Password:'',\n      })\n    \n    \n    \n    const [error,setError] = useState({\n        'First Name':'',\n        'Last Name':'',\n        Email:'',\n        Password:'',\n    })\n\n        const[image,setImage] = useState({\n            'First Name':'none',\n            'Last Name':'none',\n           Email:'none',\n           Password: 'none'\n        })\n\n\n    const [input,setInputs] = useState({\n        'First Name':'',\n        'Last Name':'', \n        Email:'',\n        Password:''\n    })\n\n\n    function inputChange(event){\n        const {value,name} = event.target;\n        setInputs(prevValue => {\n           return {\n               ...prevValue,\n               [name]:value\n           }\n        })\n    }\n\n\n\n    function submitButton(event){\n       Object.entries(input).forEach(entry =>{\n           if(entry[1]===''){\n               setError(prevValue=>{\n                 return  {\n                       ...prevValue,\n                        [entry[0]]: `${entry[0]} cannot be left empty`\n                   }\n               })\n               setImage(prevValue=>{\n                   return{\n                       ...prevValue,\n                       [entry[0]]: ''\n                   }\n               })\n               setColor(prevValue=>{\n                   return{\n                       ...prevValue,\n                       [entry[0]]:'hsl(0, 100%, 74%)'\n                   }\n               })\n               \n           }else if(entry[0]==='Email' && (entry[1].includes('@') === false || entry[1].includes('.')===false)){\n            setError(prevValue=>{\n                return  {\n                      ...prevValue,\n                       [entry[0]]: 'Looks like this is not an email'\n                  }\n              })\n              setImage(prevValue=>{\n                return{\n                    ...prevValue,\n                    [entry[0]]: ''\n                }\n            })\n        } \n           else{\n            setError(prevValue=>{\n                return  {\n                      ...prevValue,\n                       [entry[0]]: ''\n                  }\n              })\n              setImage(prevValue=>{\n                return{\n                    ...prevValue,\n                    [entry[0]]: 'none'\n                }\n            })\n            setColor(prevValue=>{\n                return{\n                    ...prevValue,\n                    [entry[0]]:''\n                }\n            })\n            if(Object.values(input).includes('')===false && (input.Email.includes('@') && input.Email.includes('.'))){\n            setInputs(prevValue=>{\n                return{\n                    ...prevValue,\n                    [entry[0]]:''\n                }\n            })\n        }\n           }\n       })\n   \n    \n       event.preventDefault()\n    }\n\n\n \n\n    return(\n        <div className = 'formContainer'>\n            <button className='trialButton'>Try it free 7 days <span>then $20/mo. thereafter</span></button>\n            <form> \n                <input value={input['First Name']} onChange={inputChange} style={{background:image['First Name'],borderColor:color['First Name']}} type='text' name='First Name' placeholder='First Name'></input>\n                <p className='errorAlert'><em>{error['First Name']}</em></p>\n                <input value={input['Last Name']} onChange={inputChange} style={{background:image['Last Name'],borderColor:color['Last Name']}} type='text' name='Last Name' placeholder='Last Name'></input>\n                <p  className='errorAlert'><em>{error['Last Name']}</em></p>\n                <input value={input.Email} onChange={inputChange} style={{background:image.Email,borderColor:color.Email}} type='email' name='Email' placeholder='Email Address'></input>\n                <p className='errorAlert'><em>{error.Email}</em> </p>\n                <input value={input.Password} onChange={inputChange} style={{background:image.Password,borderColor:color.Password}} type='password' name='Password' placeholder='Password'></input>\n                <p className='errorAlert'><em>{error.Password}</em></p>\n                <button onClick={submitButton} type='submit' className='submitButton'>CLAIM YOUR FREE TRIAL</button>\n                <p className='terms'>By checking this button you are agreeing to our <span>Terms and Services</span></p>\n            </form>\n        </div>\n    )\n}\n\nexport default Form;","import React from 'react';\nimport Form from './Form';\nconst App = () => {\n    return(\n        <main>\n            <div className='flexContainer'>\n                <section>\n                    <h1>Learn to code by watching others</h1>\n                    <p className = 'description'>  See how experienced developers solve problems in real-time. Watching scripted tutorials is great, but understanding how developers think is invaluable.</p>\n                </section>\n                <Form/>\n            </div>\n        </main>\n    )\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}